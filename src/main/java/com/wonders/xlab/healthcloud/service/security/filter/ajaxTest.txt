package com.wonders.xlab.healthcloud.service.security.filter;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.subject.Subject;
import org.apache.shiro.web.filter.authc.FormAuthenticationFilter;
import org.apache.shiro.web.util.WebUtils;
import org.bsth.gjzgs.busbattery.core.security.shiro.principal.BasicPrincipal;
import org.bsth.gjzgs.busbattery.core.security.shiro.realm.SysJDBCRealm;
import org.bsth.gjzgs.busbattery.core.security.shiro.realm.SysUserAccountToken;
import org.bsth.gjzgs.busbattery.dao.BaseRepository;
import org.bsth.gjzgs.busbattery.entity.security.SysUser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * ajax请求时的 验证过滤器。 可以处理所有请求，包括一般的form提交。
 * 
 * @author user
 * 
 */
public class AjaxAuthenticationFilter extends FormAuthenticationFilter {
	private SysJDBCRealm realm;

	public SysJDBCRealm getRealm() {
		return realm;
	}

	public void setRealm(SysJDBCRealm realm) {
		this.realm = realm;
	}

	private BaseRepository br;

	public BaseRepository getBr() {
		return br;
	}

	public void setBr(BaseRepository br) {
		this.br = br;
	}

	private static final Logger log = LoggerFactory
			.getLogger(AjaxAuthenticationFilter.class);

	protected static final String DEFAULT_LF_INC_MESSAGE = "密码错误";
	protected static final String DEFAULT_LF_UA_MESSAGE = "账号不存在";
	protected static final String DEFAULT_LF_LA_MESSAGE = "账号被锁定";
	protected static final String DEFAULT_LF_UE_MESSAGE = "未知错误";
	protected static final String DEFAULT_LOGIN_MESSAGE = "登录成功";
	protected static final String DEFAULT_NOT_LOGIN_MESSAGE = "未登录系统";

	protected String incorrectCredentialsmessage = DEFAULT_LF_INC_MESSAGE;
	protected String unknownaccountmessage = DEFAULT_LF_UA_MESSAGE;
	protected String lockedaccountmessage = DEFAULT_LF_LA_MESSAGE;
	protected String unknownexceptionmessage = DEFAULT_LF_UE_MESSAGE;
	protected String loginmessage = DEFAULT_LOGIN_MESSAGE;
	protected String notloginmessage = DEFAULT_NOT_LOGIN_MESSAGE;

	public String getIncorrectCredentialsmessage() {
		return incorrectCredentialsmessage;
	}

	public void setIncorrectCredentialsmessage(
			String incorrectCredentialsmessage) {
		this.incorrectCredentialsmessage = incorrectCredentialsmessage;
	}

	public String getUnknownaccountmessage() {
		return unknownaccountmessage;
	}

	public void setUnknownaccountmessage(String unknownaccountmessage) {
		this.unknownaccountmessage = unknownaccountmessage;
	}

	public String getLockedaccountmessage() {
		return lockedaccountmessage;
	}

	public void setLockedaccountmessage(String lockedaccountmessage) {
		this.lockedaccountmessage = lockedaccountmessage;
	}

	public String getUnknownexceptionmessage() {
		return unknownexceptionmessage;
	}

	public void setUnknownexceptionmessage(String unknownexceptionmessage) {
		this.unknownexceptionmessage = unknownexceptionmessage;
	}

	public String getLoginmessage() {
		return loginmessage;
	}

	public void setLoginmessage(String loginmessage) {
		this.loginmessage = loginmessage;
	}

	public String getNotloginmessage() {
		return notloginmessage;
	}

	public void setNotloginmessage(String notloginmessage) {
		this.notloginmessage = notloginmessage;
	}

	@Override
	protected boolean executeLogin(ServletRequest request,
			ServletResponse response) throws Exception {
		// 复写登录操作，使用自定义token，方便处理缓存
		SysUserAccountToken token = new SysUserAccountToken(
				getUsername(request), getPassword(request),
				isRememberMe(request), getHost(request));
		try {
			Subject subject = getSubject(request, response);
			subject.login(token);
			return onLoginSuccess(token, subject, request, response);
		} catch (AuthenticationException e) {
			return onLoginFailure(token, e, request, response);
		}
	}

	@Override
	protected boolean onLoginSuccess(AuthenticationToken token,
			Subject subject, ServletRequest request, ServletResponse response)
			throws Exception {
		HttpServletRequest httpServletRequest = WebUtils.toHttp(request);
		HttpServletResponse httpServletResponse = WebUtils.toHttp(response);
		
		if (!"XMLHttpRequest".equalsIgnoreCase(httpServletRequest
				.getHeader("x-requested-with"))) {
			// 不是ajax请求，即登录的方式是一般的form提交
			// super的方法返回的是false;
			return super.onLoginSuccess(token, subject, httpServletRequest,
					httpServletResponse);
		} else {
			// 是ajax请求
			httpServletResponse.setCharacterEncoding("UTF-8");
			
			PrintWriter out = httpServletResponse.getWriter();
			out.print(JSONObject.fromObject(
					new AjaxAuthenticationFilterMessage().setLoginSuccess(true)
							.setMessage(this.loginmessage)).toString());
			out.flush();
			out.close();
			return false;
		}
	}

	
	@Override
	protected boolean onLoginFailure(AuthenticationToken token,
			AuthenticationException e, ServletRequest request,
			ServletResponse response) {
		HttpServletRequest httpServletRequest = WebUtils.toHttp(request);
		HttpServletResponse httpServletResponse = WebUtils.toHttp(response);

		if (!"XMLHttpRequest".equalsIgnoreCase(httpServletRequest
				.getHeader("x-requested-with"))) {
			// 不是ajax请求，即登录的方式是一般的form提交
			// 保存登录的异常错误，放入request中
			request.setAttribute(getFailureKeyAttribute(), e);
			return true;
			
		} else {
			// 是ajax请求
			try {
				httpServletResponse.setCharacterEncoding("UTF-8");
				
				PrintWriter out = httpServletResponse.getWriter();
				String message = e.getClass().getSimpleName();
				if ("IncorrectCredentialsException".equals(message)) {
					out.print(JSONObject.fromObject(
							new AjaxAuthenticationFilterMessage()
									.setLoginSuccess(false).setMessage(
											this.incorrectCredentialsmessage))
							.toString());
				} else if ("UnknownAccountException".equals(message)) {
					out.print(JSONObject.fromObject(
							new AjaxAuthenticationFilterMessage()
									.setLoginSuccess(false).setMessage(
											this.unknownaccountmessage))
							.toString());
				} else if ("LockedAccountException".equals(message)) {
					out.print(JSONObject.fromObject(
							new AjaxAuthenticationFilterMessage()
									.setLoginSuccess(false).setMessage(
											this.lockedaccountmessage))
							.toString());
				} else {
					out.print(JSONObject.fromObject(
							new AjaxAuthenticationFilterMessage()
									.setLoginSuccess(false).setMessage(
											this.unknownexceptionmessage))
							.toString());
				}
				out.flush();
				out.close();
			} catch (IOException exp) {
				exp.printStackTrace();
			}
			return false;
		}
	}

	@Override
	protected boolean onAccessDenied(ServletRequest request,
			ServletResponse response) throws Exception {

		HttpServletRequest httpServletRequest = WebUtils.toHttp(request);
		HttpServletResponse httpServletResponse = WebUtils.toHttp(response);

		if (isLoginRequest(request, response)) {
			if (isLoginSubmission(request, response)) {
				if (log.isTraceEnabled()) {
					log.trace("Login submission detected.  Attempting to execute login.");
				}

				// if ("XMLHttpRequest".equalsIgnoreCase(httpServletRequest
				// .getHeader("x-requested-with"))) {
				// // 是ajax请求，以后要做验证码分析，代码如下，暂时不用
				// String vcode = request.getParameter("vcode");
				// HttpServletRequest httpservletrequest = (HttpServletRequest)
				// request;
				// String vvcode = (String) httpservletrequest
				// .getSession()
				// .getAttribute(
				// com.google.code.kaptcha.Constants.KAPTCHA_SESSION_KEY);
				// if (vvcode == null || "".equals(vvcode)
				// || !vvcode.equals(vcode)) {
				// response.setCharacterEncoding("UTF-8");
				// PrintWriter out = response.getWriter();
				// out.println("{success:false,message:'验证码错误'}");
				// out.flush();
				// out.close();
				// return false;
				// }
				// }

				return executeLogin(request, response);
			} else {
				if (!"XMLHttpRequest".equalsIgnoreCase(httpServletRequest
						.getHeader("x-requested-with"))) {
					// 不是ajax请求，即登录的方式是一般的form提交
					if (log.isTraceEnabled()) {
						log.trace("Login page view.");
					}
					// allow them to see the login page ;)
					return true;
				} else {
					// 是ajax请求
					httpServletResponse.setCharacterEncoding("UTF-8");
					
					PrintWriter out = httpServletResponse.getWriter();
					out.print(JSONObject.fromObject(
							new AjaxAuthenticationFilterMessage()
									.setLoginSuccess(false).setMessage(
											this.notloginmessage)).toString());
					out.flush();
					out.close();
					return false;
				}
			}
		} else {
			if (log.isTraceEnabled()) {
				log.trace("Attempting to access a path which requires authentication.  Forwarding to the "
						+ "Authentication url [" + getLoginUrl() + "]");
			}

			if (!"XMLHttpRequest".equalsIgnoreCase(httpServletRequest
					.getHeader("x-requested-with"))) {
				// 不是ajax请求，即登录的方式是一般的form提交
				saveRequestAndRedirectToLogin(request, response);
			} else {
				// 是ajax请求
				httpServletResponse.setCharacterEncoding("UTF-8");
				
				httpServletResponse
						.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
				PrintWriter out = httpServletResponse.getWriter();
				out.print(JSONObject.fromObject(
						new AjaxAuthenticationFilterMessage().setLoginSuccess(
								false).setMessage(this.notloginmessage))
						.toString());
				out.flush();
				out.close();
			}
			return false;
		}

	}

	/**
	 * 复写此方法，用于支持重置身份的操作。 重置身份：eg
	 * 管理员修改了某个用户相关的权限，需要重置这个用户的身份信息（不需要此用户重新登录，就能启效果），
	 * 一般而言，可以通过找到这个用户的session，然后作废session，默认shiro session管理使用的是
	 * ServletContainerSessionManager， 没有办法修改，除非使用扩展的session管理（如shiro 的本地会话管理
	 * DefaultWebSessionManager），因此只能通过变通的方法实现。
	 * 实现原理：使用shiro缓存来判定是否重置了用户身份信息，也就是当subject已经验证了
	 * ，但是realm的身份缓存中找不到subject的身份信息， 此时判定已经重置了subject的身份信息，然后通过filter logout
	 * subject。 例外情况：因为使用了变通方法，如果没有设置缓存则没有办法处理了，直接返回了。
	 * 
	 */
	@Override
	protected boolean isAccessAllowed(ServletRequest request,
			ServletResponse response, Object mappedValue) {
		Subject subject = getSubject(request, response);
		// 判定是否开启缓存及身份验证状态，没有缓存或没有身份则默认处理（如上注释）
		if (!realm.isAuthenticationCachingEnabled()
				|| !subject.isAuthenticated())
			return subject.isAuthenticated();

		// 如果缓存存在，重置身份（如上注释）
		BasicPrincipal bp = (BasicPrincipal) subject.getPrincipal();
		SysUser user = new SysUser();
		user.setLoginname(bp.getLoginname());
		user.setUserpassword(bp.getPassword());
		if (realm.isCachedAuthenticationInfo(user, isRememberMe(request), getHost(request)))
			return subject.isAuthenticated();
		else {
			// 当前验证通过的，并且身份缓存不存在，表明已重置身份，那么就退出logout
			subject.logout();
			return subject.isAuthenticated();
		}
	}
}


package org.bsth.gjzgs.busbattery.core.security.shiro.realm;

import java.util.ArrayList;
import java.util.List;

import org.apache.shiro.authc.AccountException;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.Permission;
import org.apache.shiro.cache.Cache;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.apache.shiro.subject.SimplePrincipalCollection;
import org.bsth.gjzgs.busbattery.core.security.shiro.cache.SysEhCacheManager;
import org.bsth.gjzgs.busbattery.core.security.shiro.permission.SysResourcePermission;
import org.bsth.gjzgs.busbattery.core.security.shiro.permission.SysResourcePermissionResolver;
import org.bsth.gjzgs.busbattery.core.security.shiro.permission.SysResourceType;
import org.bsth.gjzgs.busbattery.core.security.shiro.principal.BasicPrincipal;
import org.bsth.gjzgs.busbattery.dao.BaseRepository;
import org.bsth.gjzgs.busbattery.entity.security.SysBatteryBus;
import org.bsth.gjzgs.busbattery.entity.security.SysUser;
import org.bsth.gjzgs.busbattery.service.security.SysTransactionScript;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Component;

/**
 * sys jdbc realm。（由spring 注入）
 * @author user
 *
 */
@Component
public class SysJDBCRealm extends AuthorizingRealm {
	@Autowired
	private SysTransactionScript systs;
	@Autowired
	private BaseRepository br;
	
	public SysJDBCRealm() {
		// realm域名
		setName("sysJDBCRealm");
		// 自定义SysResourcePermission权限解析器
		setPermissionResolver(new SysResourcePermissionResolver());
		// 开启cache ,缓存管理器 使用Ehcache实现
		setCachingEnabled(true);
		setAuthenticationCachingEnabled(true);
		setAuthorizationCachingEnabled(true);
		setAuthenticationCacheName("sysAuthenticationCache"); // authentication缓存名
		setAuthorizationCacheName("sysAuthorizationCache"); // authorization缓存名
		SysEhCacheManager cm = new SysEhCacheManager();
		cm.setCacheManagerConfigFile("classpath:ehcache.xml");
		setCacheManager(cm);
	}
	
	@Override
	protected AuthenticationInfo doGetAuthenticationInfo(
			AuthenticationToken token) throws AuthenticationException {
		// TODO：以后改
		
		SysUserAccountToken upToken = (SysUserAccountToken) token;
		String loginname = upToken.getUsername();
		if (loginname == null || "".equals(loginname)) {
			throw new AccountException("用户名必须填写！");
		}
		
		try {
			SysUser user = new SysUser().addBaseRepository(br).queryByLoginname(loginname);
			if (user == null || (user.getUserpassword() == null || "".equals(user.getUserpassword()))) {
				throw new UnknownAccountException("登录名为：" + loginname + " 的账户不存在！");
			}
			
			// 返回身份验证信息
			return new UserAccount(getName(), user);
		} catch (UnknownAccountException exp) {
			throw exp;
		} catch (DataAccessException exp) {
			exp.printStackTrace();
			throw new AuthenticationException("数据访问对象异常！", exp);
		} catch (RuntimeException exp) {
			exp.printStackTrace();
			throw new AuthenticationException("运行时异常！", exp);
		} catch (Exception exp) {
			exp.printStackTrace();
			throw new AuthenticationException("其他错误！", exp);
		}
	}
	@Override
	protected AuthorizationInfo doGetAuthorizationInfo(
			PrincipalCollection principals) {
		// TODO：以后改
		String loginname = ((BasicPrincipal) principals.getPrimaryPrincipal()).getLoginname();
		SysUser user = new SysUser().addBaseRepository(br).queryByLoginname(loginname);
		if (user != null) 
			// 返回授权信息
			return new UserAccount(
					getName(), 
					systs.getAllRolesByUser(user.getUserId()), 
					systs.getAllPermissionsByUser(user.getUserId()));
		else 
			return null;
	}
	
	/**
	 * 根据指定的身份用户车辆数据权限，返回可访问的车辆数据。
	 * @return
	 */
	public List<SysBatteryBus> getClinfoForSubject(PrincipalCollection pcs) {
		List<SysBatteryBus> return_clinfos = new ArrayList<SysBatteryBus>();
		// 获取当前subject的permission（从cache中获取）
		// 从cache中获取授权信息来自 AuthorizingRealm getAuthorizationInfo方法
		List<Permission> allpermissions = new ArrayList<Permission>();
		AuthorizationInfo authorizationInfo = this.getAuthorizationInfo(pcs);
		if (authorizationInfo != null) 
			allpermissions.addAll(authorizationInfo.getObjectPermissions());
		List<String> clzbhs = new ArrayList<String>();
		for (Permission p : allpermissions) {
			SysResourcePermission sp = (SysResourcePermission) p;
			if (sp.getSysResourceType() == SysResourceType.CLINFO_RESOURCE) 
				clzbhs.add(sp.getPermissionstring()); // 车辆数据权限字符串就是自编号
		}
		
		if (clzbhs.size() > 0)
			return_clinfos.addAll(new SysBatteryBus().addBaseRepository(br).queryByZbhs(clzbhs.toArray(new String[0])));

		return return_clinfos;
	}
	
	/**
	 * 清空指定用户的授权cache。
	 * @param subject
	 */
	public void clearAuthoriaztionInfoForSysuser(SysUser user) {
		AuthenticationInfo account = new UserAccount(getName(), user);
		// key是用户的principals tostring
		this.clearCachedAuthorizationInfo(account.getPrincipals());
	}
	/**
	 * 清空指定用户的身份cache。
	 * @param user
	 */
	public void clearAuthenticationInfoForSysuser(SysUser user) {
		// key是token的getPrincipal，默认返回的是登录用户名（参见SysUserAccountToken）
		BasicPrincipal basicPrincipal = new BasicPrincipal();
		basicPrincipal.setRealusername(user.getUsername()); // 用户名
		basicPrincipal.setLoginname(user.getLoginname()); // 登录名
		basicPrincipal.setPassword(user.getUserpassword()); // 密码
		
		SimplePrincipalCollection spc = new SimplePrincipalCollection();
		spc.add(basicPrincipal, getName());
		this.clearCachedAuthenticationInfo(spc);
	}
	
	@Override
	protected void clearCachedAuthenticationInfo(PrincipalCollection principals) {
		BasicPrincipal basicPrincipal = (BasicPrincipal) principals.getPrimaryPrincipal();
		SimplePrincipalCollection spc = new SimplePrincipalCollection(basicPrincipal.getLoginname(), getName());
		super.clearCachedAuthenticationInfo(spc);
	}
	
	/**
	 * 判定一个用户是否缓存身份。
	 * @param user
	 * @return
	 */
	public boolean isCachedAuthenticationInfo(SysUser user, boolean isRememberMe, String host) {
		AuthenticationToken token = new SysUserAccountToken(user.getLoginname(), user.getUserpassword(), isRememberMe, host);
        Cache<Object, AuthenticationInfo> cache = getAuthenticationCache();
        AuthenticationInfo info = null;
        Object key = getAuthenticationCacheKey(token);
        info = cache.get(key);
        if (info == null) 
        	return false; // 被clear了，如调用了clearAuthenticationInfoForSysuser
        else
        	return true; // 没有clear
	}
}

package org.bsth.gjzgs.busbattery.core.security.shiro.realm;

import java.io.Serializable;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.shiro.authc.UsernamePasswordToken;

/**
 * 自定义token用于验证身份（添加equals，hashcode方法用于缓存处理）。
 * @author user
 *
 */
public class SysUserAccountToken extends UsernamePasswordToken implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	public SysUserAccountToken(final String username, final String password, final boolean rememberMe, final String host) {
		super(username, password, rememberMe, host);
	}
	
	@Override
	public Object getPrincipal() {
		// 这个是key值，默认返回用户名，以后要改
		return super.getPrincipal();
	}
	
	@Override
	public boolean equals(Object other) {
		if (this == other)
			return true;
		if (!(other instanceof SysUserAccountToken))
			return false;
		SysUserAccountToken castOther = (SysUserAccountToken) other;
		return new EqualsBuilder()
			.append(this.getUsername(), castOther.getUsername())
			.append(this.getPassword(), castOther.getPassword())
			.isEquals();
	}
	
	@Override
	public int hashCode() {
		return new HashCodeBuilder()
			.append(this.getUsername())
			.append(this.getPassword())
			.hashCode();
	}
	
	@Override
	public String toString() {
		return super.toString();
	}
	
}
